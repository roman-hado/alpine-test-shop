{"version":3,"file":"check.js","sourceRoot":"","sources":["../../../../src/cli/commands/theme/check.ts"],"names":[],"mappings":"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","sourcesContent":["import {themeFlags} from '../../flags.js'\nimport ThemeCommand from '../../utilities/theme-command.js'\nimport {execCLI2} from '@shopify/cli-kit/node/ruby'\nimport {Flags} from '@oclif/core'\nimport {globalFlags} from '@shopify/cli-kit/node/cli'\n\nexport default class Check extends ThemeCommand {\n  static description = 'Validate the theme.'\n\n  static flags = {\n    ...globalFlags,\n    path: themeFlags.path,\n    'auto-correct': Flags.boolean({\n      char: 'a',\n      required: false,\n      description: 'Automatically fix offenses',\n      env: 'SHOPIFY_FLAG_AUTO_CORRECT',\n    }),\n    category: Flags.string({\n      char: 'c',\n      required: false,\n      description: `Only run this category of checks\nRuns checks matching all categories when specified more than once`,\n      env: 'SHOPIFY_FLAG_CATEGORY',\n    }),\n    config: Flags.string({\n      char: 'C',\n      required: false,\n      description: `Use the config provided, overriding .theme-check.yml if present\nUse :theme_app_extension to use default checks for theme app extensions`,\n      env: 'SHOPIFY_FLAG_CONFIG',\n    }),\n    'exclude-category': Flags.string({\n      char: 'x',\n      required: false,\n      description: `Exclude this category of checks\nExcludes checks matching any category when specified more than once`,\n      env: 'SHOPIFY_FLAG_EXCLUDE_CATEGORY',\n    }),\n    'fail-level': Flags.string({\n      required: false,\n      description: 'Minimum severity for exit with error code',\n      env: 'SHOPIFY_FLAG_FAIL_LEVEL',\n      options: ['error', 'suggestion', 'style'],\n    }),\n    init: Flags.boolean({\n      required: false,\n      description: 'Generate a .theme-check.yml file',\n      env: 'SHOPIFY_FLAG_INIT',\n    }),\n    list: Flags.boolean({\n      required: false,\n      description: 'List enabled checks',\n      env: 'SHOPIFY_FLAG_LIST',\n    }),\n    output: Flags.string({\n      char: 'o',\n      required: false,\n      description: 'The output format to use',\n      env: 'SHOPIFY_FLAG_OUTPUT',\n      options: ['text', 'json'],\n      default: 'text',\n    }),\n    print: Flags.boolean({\n      required: false,\n      description: 'Output active config to STDOUT',\n      env: 'SHOPIFY_FLAG_PRINT',\n    }),\n    version: Flags.boolean({\n      char: 'v',\n      required: false,\n      description: 'Print Theme Check version',\n      env: 'SHOPIFY_FLAG_VERSION',\n    }),\n  }\n\n  static cli2Flags = [\n    'auto-correct',\n    'category',\n    'config',\n    'exclude-category',\n    'fail-level',\n    'init',\n    'list',\n    'output',\n    'print',\n    'version',\n  ]\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Check)\n    await execCLI2(['theme', 'check', flags.path, ...this.passThroughFlags(flags, {allowedFlags: Check.cli2Flags})], {\n      directory: flags.path,\n    })\n  }\n}\n"]}