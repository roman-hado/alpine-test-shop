{"version":3,"file":"dev.js","sourceRoot":"","sources":["../../../../src/cli/commands/theme/dev.ts"],"names":[],"mappings":"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","sourcesContent":["import {themeFlags} from '../../flags.js'\nimport {getThemeStore} from '../../utilities/theme-store.js'\nimport ThemeCommand from '../../utilities/theme-command.js'\nimport {Flags} from '@oclif/core'\nimport {globalFlags} from '@shopify/cli-kit/node/cli'\nimport {output} from '@shopify/cli-kit'\nimport {execCLI2} from '@shopify/cli-kit/node/ruby'\nimport {AbortController} from '@shopify/cli-kit/node/abort'\nimport {ensureAuthenticatedStorefront, ensureAuthenticatedThemes} from '@shopify/cli-kit/node/session'\nimport {sleep} from '@shopify/cli-kit/node/system'\n\nexport default class Dev extends ThemeCommand {\n  static description =\n    'Uploads the current theme as a development theme to the connected store, then prints theme editor and preview URLs to your terminal. While running, changes will push to the store in real time.'\n\n  static flags = {\n    ...globalFlags,\n    path: themeFlags.path,\n    host: Flags.string({\n      description: 'Set which network interface the web server listens on. The default value is 127.0.0.1.',\n      env: 'SHOPIFY_FLAG_HOST',\n    }),\n    'live-reload': Flags.string({\n      description: `The live reload mode switches the server behavior when a file is modified:\n- hot-reload Hot reloads local changes to CSS and sections (default)\n- full-page  Always refreshes the entire page\n- off        Deactivate live reload`,\n      default: 'hot-reload',\n      options: ['hot-reload', 'full-page', 'off'],\n      env: 'SHOPIFY_FLAG_LIVE_RELOAD',\n    }),\n    poll: Flags.boolean({\n      description: 'Force polling to detect file changes.',\n      env: 'SHOPIFY_FLAG_POLL',\n    }),\n    'theme-editor-sync': Flags.boolean({\n      char: 'e',\n      description: 'Synchronize Theme Editor updates in the local theme files.',\n      env: 'SHOPIFY_FLAG_THEME_EDITOR_SYNC',\n    }),\n    port: Flags.string({\n      description: 'Local port to serve theme preview from.',\n      env: 'SHOPIFY_FLAG_PORT',\n    }),\n    store: themeFlags.store,\n    theme: Flags.string({\n      char: 't',\n      description: 'Theme ID or name of the remote theme.',\n      env: 'SHOPIFY_FLAG_THEME_ID',\n    }),\n    only: Flags.string({\n      char: 'o',\n      multiple: true,\n      description: 'Hot reload only files that match the specified pattern.',\n      env: 'SHOPIFY_FLAG_ONLY',\n    }),\n    ignore: Flags.string({\n      char: 'x',\n      multiple: true,\n      description: 'Skip hot reloading any files that match the specified pattern.',\n      env: 'SHOPIFY_FLAG_IGNORE',\n    }),\n    stable: Flags.boolean({\n      hidden: true,\n      description:\n        'Performs the upload by relying in the legacy upload approach (slower, but it might be more stable in some scenarios)',\n      env: 'SHOPIFY_FLAG_STABLE',\n    }),\n    force: Flags.boolean({\n      hidden: true,\n      char: 'f',\n      description: 'Proceed without confirmation, if current directory does not seem to be theme directory.',\n      env: 'SHOPIFY_FLAG_FORCE',\n    }),\n    password: themeFlags.password,\n  }\n\n  static cli2Flags = [\n    'host',\n    'live-reload',\n    'poll',\n    'theme-editor-sync',\n    'port',\n    'theme',\n    'only',\n    'ignore',\n    'stable',\n    'force',\n  ]\n\n  // Tokens are valid for 120m, better to be safe and refresh every 110min\n  ThemeRefreshTimeoutInMs = 110 * 60 * 1000\n\n  /**\n   * Executes the theme serve command.\n   * Every 110 minutes, it will refresh the session token and restart the server.\n   */\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Dev)\n\n    const flagsToPass = this.passThroughFlags(flags, {allowedFlags: Dev.cli2Flags})\n    const command = ['theme', 'serve', flags.path, ...flagsToPass]\n\n    const store = getThemeStore(flags)\n\n    let controller = new AbortController()\n\n    setInterval(() => {\n      output.debug('Refreshing theme session token and restarting theme server...')\n      controller.abort()\n      controller = new AbortController()\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.execute(store, flags.password, command, controller)\n    }, this.ThemeRefreshTimeoutInMs)\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.execute(store, flags.password, command, controller)\n  }\n\n  async execute(store: string, password: string | undefined, command: string[], controller: AbortController) {\n    await sleep(3)\n    const adminSession = await ensureAuthenticatedThemes(store, password, [], true)\n    const storefrontToken = await ensureAuthenticatedStorefront([], password)\n    return execCLI2(command, {adminSession, storefrontToken, signal: controller.signal})\n  }\n}\n"]}