import { getThemeStore } from '../../utilities/theme-store.js';
import ThemeCommand from '../../utilities/theme-command.js';
import { themeFlags } from '../../flags.js';
import { Flags } from '@oclif/core';
import { globalFlags } from '@shopify/cli-kit/node/cli';
import { execCLI2 } from '@shopify/cli-kit/node/ruby';
import { ensureAuthenticatedThemes } from '@shopify/cli-kit/node/session';
export default class Delete extends ThemeCommand {
    async run() {
        const { flags, argv } = await this.parse(Delete);
        const store = await getThemeStore(flags);
        const command = ['theme', 'delete'];
        if (argv.length > 0) {
            command.push(...argv);
        }
        const flagsToPass = this.passThroughFlags(flags, { allowedFlags: Delete.cli2Flags });
        command.push(...flagsToPass);
        const adminSession = await ensureAuthenticatedThemes(store, flags.password);
        await execCLI2(command, { adminSession });
    }
}
Delete.description = "Delete remote themes from the connected store. This command can't be undone.";
// Accept any number of args without naming them
Delete.strict = false;
Delete.flags = {
    ...globalFlags,
    password: themeFlags.password,
    development: Flags.boolean({
        char: 'd',
        description: 'Delete your development theme.',
        env: 'SHOPIFY_FLAG_DEVELOPMENT',
    }),
    'show-all': Flags.boolean({
        char: 'a',
        description: 'Include others development themes in theme list.',
        env: 'SHOPIFY_FLAG_SHOW_ALL',
    }),
    force: Flags.boolean({
        char: 'f',
        description: 'Skip confirmation.',
        env: 'SHOPIFY_FLAG_FORCE',
    }),
    store: themeFlags.store,
};
Delete.cli2Flags = ['development', 'show-all', 'force'];
//# sourceMappingURL=delete.js.map