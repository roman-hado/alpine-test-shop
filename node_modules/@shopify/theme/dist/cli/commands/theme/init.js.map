{"version":3,"file":"init.js","sourceRoot":"","sources":["../../../../src/cli/commands/theme/init.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,gBAAgB,CAAA;AACzC,OAAO,YAAY,MAAM,kCAAkC,CAAA;AAC3D,OAAO,EAAC,6BAA6B,EAAE,SAAS,EAAC,MAAM,wBAAwB,CAAA;AAC/E,OAAO,EAAC,KAAK,EAAC,MAAM,aAAa,CAAA;AACjC,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAA;AACrD,OAAO,EAAC,EAAE,EAAC,MAAM,kBAAkB,CAAA;AACnC,OAAO,EAAC,iCAAiC,EAAC,MAAM,0BAA0B,CAAA;AAC1E,OAAO,EAAC,WAAW,EAAE,GAAG,EAAC,MAAM,4BAA4B,CAAA;AAE3D,MAAM,CAAC,OAAO,OAAO,IAAK,SAAQ,YAAY;IA4B5C,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,IAAI,EAAE,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC5C,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;QAC9D,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAA;QAC5D,MAAM,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;QACjD,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,CAAA;QAElC,IAAI,KAAK,CAAC,MAAM,EAAE;YAChB,MAAM,6BAA6B,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;SAC1D;aAAM;YACL,MAAM,SAAS,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;SACtC;IACH,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,SAAiB;QAChC,MAAM,WAAW,GAAG,MAAM,iCAAiC,CAAC,EAAC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAC,CAAC,CAAA;QAE7G,MAAM,QAAQ,GAAgB;YAC5B,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,uBAAuB;YAChC,OAAO,EAAE,WAAW;SACrB,CAAA;QACD,MAAM,EAAC,IAAI,EAAC,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;QAC1C,OAAO,IAAI,CAAA;IACb,CAAC;;AApDM,gBAAW,GAAG,8EAA8E,CAAA;AAE5F,SAAI,GAAG;IACZ;QACE,IAAI,EAAE,MAAM;QACZ,WAAW,EAAE,uBAAuB;QACpC,QAAQ,EAAE,KAAK;KAChB;CACF,CAAA;AAEM,UAAK,GAAG;IACb,GAAG,WAAW;IACd,IAAI,EAAE,UAAU,CAAC,IAAI;IACrB,WAAW,EAAE,KAAK,CAAC,MAAM,CAAC;QACxB,IAAI,EAAE,GAAG;QACT,OAAO,EAAE,qCAAqC;QAC9C,WAAW,EACT,2GAA2G;QAC7G,GAAG,EAAE,wBAAwB;KAC9B,CAAC;IACF,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC;QACpB,IAAI,EAAE,GAAG;QACT,WAAW,EAAE,iDAAiD;QAC9D,GAAG,EAAE,qBAAqB;KAC3B,CAAC;CACH,CAAA","sourcesContent":["import {themeFlags} from '../../flags.js'\nimport ThemeCommand from '../../utilities/theme-command.js'\nimport {cloneRepoAndCheckoutLatestTag, cloneRepo} from '../../services/init.js'\nimport {Flags} from '@oclif/core'\nimport {globalFlags} from '@shopify/cli-kit/node/cli'\nimport {ui} from '@shopify/cli-kit'\nimport {generateRandomNameForSubdirectory} from '@shopify/cli-kit/node/fs'\nimport {resolvePath, cwd} from '@shopify/cli-kit/node/path'\n\nexport default class Init extends ThemeCommand {\n  static description = 'Clones a Git repository to use as a starting point for building a new theme.'\n\n  static args = [\n    {\n      name: 'name',\n      description: 'Name of the new theme',\n      required: false,\n    },\n  ]\n\n  static flags = {\n    ...globalFlags,\n    path: themeFlags.path,\n    'clone-url': Flags.string({\n      char: 'u',\n      default: 'https://github.com/Shopify/dawn.git',\n      description:\n        \"The Git URL to clone from. Defaults to Shopify's example theme, Dawn: https://github.com/Shopify/dawn.git\",\n      env: 'SHOPIFY_FLAG_CLONE_URL',\n    }),\n    latest: Flags.boolean({\n      char: 'l',\n      description: 'Downloads the latest release of the `clone-url`',\n      env: 'SHOPIFY_FLAG_LATEST',\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {args, flags} = await this.parse(Init)\n    const directory = flags.path ? resolvePath(flags.path) : cwd()\n    const name = args.name || (await this.promptName(directory))\n    const destination = resolvePath(flags.path, name)\n    const repoUrl = flags['clone-url']\n\n    if (flags.latest) {\n      await cloneRepoAndCheckoutLatestTag(repoUrl, destination)\n    } else {\n      await cloneRepo(repoUrl, destination)\n    }\n  }\n\n  async promptName(directory: string) {\n    const defaultName = await generateRandomNameForSubdirectory({suffix: 'theme', directory, family: 'creative'})\n\n    const question: ui.Question = {\n      type: 'input',\n      name: 'name',\n      message: 'Name of the new theme',\n      default: defaultName,\n    }\n    const {name} = await ui.prompt([question])\n    return name\n  }\n}\n"]}