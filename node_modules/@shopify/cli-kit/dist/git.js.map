{"version":3,"file":"git.js","sourceRoot":"","sources":["../src/git.ts"],"names":[],"mappings":"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","sourcesContent":["import {AbortError} from './public/node/error.js'\nimport {hasGit, isTerminalInteractive} from './public/node/environment/local.js'\nimport {content, token, debug} from './output.js'\nimport {appendFileSync} from './public/node/fs.js'\nimport {cwd} from './public/node/path.js'\nimport git, {TaskOptions, SimpleGitProgressEvent, DefaultLogFields, ListLogLine, SimpleGit} from 'simple-git'\n\nexport const factory = git\n\nexport const GitNotPresentError = () => {\n  return new AbortError(\n    `Git is necessary in the environment to continue`,\n    content`Install ${token.link('git', 'https://git-scm.com/book/en/v2/Getting-Started-Installing-Git')}`,\n  )\n}\n\nexport const OutsideGitDirectoryError = (directory: string) => {\n  return new AbortError(`${token.path(directory)} is not a Git directory`)\n}\n\nexport const NoCommitError = () => {\n  return new AbortError(\n    'Must have at least one commit to run command',\n    content`Run ${token.genericShellCommand(\"git commit -m 'Initial commit'\")} to create your first commit.`,\n  )\n}\n\nexport const DetachedHeadError = () => {\n  return new AbortError(\n    \"Git HEAD can't be detached to run command\",\n    content`Run ${token.genericShellCommand('git checkout [branchName]')} to reattach HEAD or see git ${token.link(\n      'documentation',\n      'https://git-scm.com/book/en/v2/Git-Internals-Git-References',\n    )} for more details`,\n  )\n}\n\nexport async function initializeRepository(directory: string, initialBranch = 'main') {\n  debug(content`Initializing git repository at ${token.path(directory)}...`)\n  await ensurePresentOrAbort()\n  // We use init and checkout instead of `init --initial-branch` because the latter is only supported in git 2.28+\n  const repo = git(directory)\n  await repo.init()\n  await repo.checkoutLocalBranch(initialBranch)\n}\n\nexport interface GitIgnoreTemplate {\n  [section: string]: string[]\n}\nexport function createGitIgnore(directory: string, template: GitIgnoreTemplate): void {\n  debug(content`Creating .gitignore at ${token.path(directory)}...`)\n  const filePath = `${directory}/.gitignore`\n\n  let fileContent = ''\n  for (const [section, lines] of Object.entries(template)) {\n    fileContent += `# ${section}\\n`\n    fileContent += `${lines.join('\\n')}\\n\\n`\n  }\n\n  appendFileSync(filePath, fileContent)\n}\n\nexport async function downloadRepository({\n  repoUrl,\n  destination,\n  progressUpdater,\n  shallow,\n  latestTag,\n}: {\n  repoUrl: string\n  destination: string\n  progressUpdater?: (statusString: string) => void\n  shallow?: boolean\n  latestTag?: boolean\n}) {\n  debug(content`Git-cloning repository ${repoUrl} into ${token.path(destination)}...`)\n  await ensurePresentOrAbort()\n  const [repository, branch] = repoUrl.split('#')\n  const options: TaskOptions = {'--recurse-submodules': null}\n\n  if (branch && latestTag) {\n    throw new AbortError(\"Error cloning the repository. Git can't clone the latest release with a 'branch'.\")\n  }\n  if (branch) {\n    options['--branch'] = branch\n  }\n\n  if (shallow && latestTag) {\n    throw new AbortError(\n      \"Error cloning the repository. Git can't clone the latest release with the 'shallow' property.\",\n    )\n  }\n  if (shallow) {\n    options['--depth'] = 1\n  }\n\n  const progress = ({stage, progress, processed, total}: SimpleGitProgressEvent) => {\n    const updateString = `${stage}, ${processed}/${total} objects (${progress}% complete)`\n    if (progressUpdater) progressUpdater(updateString)\n  }\n\n  const simpleGitOptions = {\n    progress,\n    ...(!isTerminalInteractive() && {config: ['core.askpass=true']}),\n  }\n  try {\n    await git(simpleGitOptions).clone(repository!, destination, options)\n\n    if (latestTag) {\n      const localGitRepository = git(destination)\n      const latestTag = await getLocalLatestTag(localGitRepository, repoUrl)\n      await localGitRepository.checkout(latestTag)\n    }\n  } catch (err) {\n    if (err instanceof Error) {\n      const abortError = new AbortError(err.message)\n      abortError.stack = err.stack\n      throw abortError\n    }\n    throw err\n  }\n}\n\nasync function getLocalLatestTag(repository: SimpleGit, repoUrl: string) {\n  const latest = (await repository.tags()).latest\n\n  if (!latest) {\n    throw new AbortError(`Couldn't obtain the most recent tag of the repository ${repoUrl}`)\n  }\n\n  return latest\n}\n\nexport async function getLatestCommit(directory?: string): Promise<DefaultLogFields & ListLogLine> {\n  const logs = await git({baseDir: directory}).log({\n    maxCount: 1,\n  })\n  if (!logs.latest) throw NoCommitError()\n  return logs.latest\n}\n\nexport async function addAll(directory?: string): Promise<void> {\n  const simpleGit = git({baseDir: directory})\n  await simpleGit.raw('add', '--all')\n}\n\nexport async function commit(message: string, options?: {directory?: string; author?: string}): Promise<string> {\n  const simpleGit = git({baseDir: options?.directory})\n\n  const commitOptions = options?.author ? {'--author': options.author} : undefined\n  const result = await simpleGit.commit(message, commitOptions)\n\n  return result.commit\n}\n\nexport async function getHeadSymbolicRef(directory?: string): Promise<string> {\n  const ref = await git({baseDir: directory}).raw('symbolic-ref', '-q', 'HEAD')\n  if (!ref) throw DetachedHeadError()\n  return ref.trim()\n}\n\n/**\n * If \"git\" is not present in the environment it throws\n * an abort error.\n */\nexport async function ensurePresentOrAbort() {\n  if (!(await hasGit())) {\n    throw GitNotPresentError()\n  }\n}\n\n/**\n * If command run from outside a .git directory tree\n * it throws an abort error.\n */\nexport async function ensureInsideGitDirectory(directory?: string) {\n  if (!(await git({baseDir: directory}).checkIsRepo())) {\n    throw OutsideGitDirectoryError(directory || cwd())\n  }\n}\n"]}