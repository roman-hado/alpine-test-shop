import { TextAnimation } from './TextAnimation.js';
import useLayout from '../hooks/use-layout.js';
import useAsyncAndUnmount from '../hooks/use-async-and-unmount.js';
import { Box, Text } from 'ink';
import React, { useState } from 'react';
const loadingBarChar = 'â–ˆ';
const Tasks = ({ tasks }) => {
    const { twoThirds } = useLayout();
    const loadingBar = new Array(twoThirds).fill(loadingBarChar).join('');
    const [currentTask, setCurrentTask] = useState(tasks[0]);
    const [state, setState] = useState('loading');
    const runTasks = async () => {
        for (const task of tasks) {
            setCurrentTask(task);
            // eslint-disable-next-line no-await-in-loop
            await task.task();
        }
    };
    useAsyncAndUnmount(runTasks, { onFulfilled: () => setState('success'), onRejected: () => setState('failure') });
    return (React.createElement(Box, { flexDirection: "column" },
        React.createElement(Box, null, state === 'loading' ? (React.createElement(TextAnimation, { text: loadingBar })) : (React.createElement(Text, { color: state === 'success' ? 'green' : 'red' }, loadingBar))),
        React.createElement(Text, null, state === 'success' ? (React.createElement(Text, null, "Complete!")) : (React.createElement(Text, null,
            currentTask.title,
            state === 'loading' && ' ...')))));
};
export { Tasks };
//# sourceMappingURL=Tasks.js.map