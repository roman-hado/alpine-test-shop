import { TextInput } from './TextInput.js';
import { handleCtrlC } from '../../ui.js';
import useLayout from '../hooks/use-layout.js';
import React, { useCallback, useState } from 'react';
import { Box, useApp, useInput, Text } from 'ink';
import { figures } from 'listr2';
const TextPrompt = ({ message, onSubmit, placeholder }) => {
    const { oneThird } = useLayout();
    const [answer, setAnswer] = useState('');
    const { exit: unmountInk } = useApp();
    const [submitted, setSubmitted] = useState(false);
    const [valid, setValid] = useState(false);
    const underline = new Array(oneThird - 3).fill('â–”');
    useInput(useCallback((input, key) => {
        handleCtrlC(input, key);
        if (key.return) {
            setSubmitted(true);
            if (valid) {
                onSubmit(answer);
                unmountInk();
            }
        }
    }, [answer, onSubmit, valid]));
    const shouldShowError = submitted && !valid;
    const color = shouldShowError ? 'red' : 'cyan';
    const error = shouldShowError ? 'Please enter a value' : undefined;
    return (React.createElement(Box, { flexDirection: "column", marginBottom: 1, width: oneThird },
        React.createElement(Box, null,
            React.createElement(Box, { marginRight: 2 },
                React.createElement(Text, null, "?")),
            React.createElement(Text, null, message)),
        submitted && valid ? (React.createElement(Box, null,
            React.createElement(Box, { marginRight: 2 },
                React.createElement(Text, { color: "cyan" }, figures.tick)),
            React.createElement(Box, { flexGrow: 1 },
                React.createElement(Text, { color: "cyan" }, answer)))) : (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Box, null,
                React.createElement(Box, { marginRight: 2 },
                    React.createElement(Text, { color: color }, `>`)),
                React.createElement(Box, { flexGrow: 1 },
                    React.createElement(TextInput, { value: answer, onChange: (answer) => {
                            setAnswer(answer);
                            setValid(answer.length > 0);
                            setSubmitted(false);
                        }, placeholder: placeholder, color: color }))),
            React.createElement(Box, { marginLeft: 3 },
                React.createElement(Text, { color: color }, underline)),
            error && (React.createElement(Box, { marginLeft: 3 },
                React.createElement(Text, { color: color }, error)))))));
};
export { TextPrompt };
//# sourceMappingURL=TextPrompt.js.map